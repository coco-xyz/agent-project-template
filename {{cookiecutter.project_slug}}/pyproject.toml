[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "agent-project-template"
version = "1.0.0"
description = "Production-ready template for building AI agent applications with pydantic-ai and FastAPI"
readme = "README.md"
requires-python = "==3.11.*"
license = {text = "MIT"}
authors = [
    {name = "Agent Template Team", email = "team@agent-project-template.com"}
]
keywords = ["ai", "agent", "template", "pydantic-ai", "fastapi", "llm", "chatbot"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core AI framework
    "pydantic-ai[logfire]==0.8.1",
    "logfire[fastapi,httpx,redis]>=3.23.0",
    # Web framework (optional)
    "fastapi==0.115.12",
    "uvicorn[standard]==0.35.0",
    "python-multipart>=0.0.6",
    # Core dependencies
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    # Database (optional)
    "sqlalchemy>=2.0.0",
    "psycopg2-binary>=2.9.0",
    # Cache and utilities (optional)
    "redis>=5.0.0",
    "sonyflake-py>=1.3.0",
    # Testing
    "pytest-asyncio>=1.1.0",
    "black>=25.1.0",
    "isort[pyproject]>=6.0.1",
    "flake8>=7.3.0",
    "mypy>=1.17.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
]

[project.urls]
Homepage = "https://github.com/your-org/agent-project-template"
Repository = "https://github.com/your-org/agent-project-template"
Documentation = "https://agent-project-template.readthedocs.io"
Issues = "https://github.com/your-org/agent-project-template/issues"

[project.scripts]
agent-project-template = "main:main"

[tool.hatch.build.targets.wheel]
packages = ["{{cookiecutter.project_slug}}"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"
asyncio_mode = "auto"
markers = [
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')"
] 

[dependency-groups]
dev = [
    "pytest>=8.4.1",
]
