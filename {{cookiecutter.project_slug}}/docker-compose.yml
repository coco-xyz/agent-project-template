services:
  # PostgreSQL database service
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-{{cookiecutter.project_slug}}}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      # POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./initdb:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-{{cookiecutter.project_slug}}}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - {{cookiecutter.project_slug}}_network
    restart: unless-stopped

  # Redis cache service
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - {{cookiecutter.project_slug}}_network
    command: redis-server --appendonly yes
    restart: unless-stopped

  # application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${APP_PORT}:8080"
    env_file:
      - .env
    environment:
      # Override only Docker-specific service names (keep all other configs from .env)
      DATABASE__URL: postgresql://postgres:postgres@postgres:5432/{{cookiecutter.project_slug}}
      REDIS__HOST: redis
      REDIS__PORT: 6379
    volumes:
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - {{cookiecutter.project_slug}}_network
    restart: unless-stopped



volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local

networks:
  {{cookiecutter.project_slug}}_network:
    driver: bridge 